<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - SwiftScout</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { padding-top: 2rem; }
        .container { max-width: 1200px; }
        .admin-section { display: none; }
    </style>
</head>
<body>
    <div class="container">
        <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
            <div class="container-fluid">
                <a class="navbar-brand" href="/dashboard">SwiftScout</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item">
                            <a class="nav-link" href="/dashboard">Dashboard</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/tickets">Tickets</a>
                        </li>
                    </ul>
                    <div class="navbar-text">
                        Welcome, #(user.name)!
                        <a href="/logout" class="btn btn-outline-danger btn-sm ms-2">Logout</a>
                    </div>
                </div>
            </div>
        </nav>

        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Recent Tickets</h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted">No tickets yet.</p>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">User Info</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Name:</strong> #(user.name)</p>
                        <p><strong>Email:</strong> #(user.email)</p>
                        <p><strong>Role:</strong> #(user.role)</p>
                    </div>
                </div>
            </div>
        </div>

        #if(user.role == "admin"):
            <div class="admin-section">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Email Settings</h5>
                    </div>
                    <div class="card-body">
                        <form id="emailSettingsForm">
                            <div class="mb-3">
                                <label class="form-label">IMAP Settings</label>
                                <div class="row">
                                    <div class="col-md-6">
                                        <input type="text" class="form-control" name="imapHost" placeholder="Host" value="#if(emailSettings):#{emailSettings.imapHost}#endif">
                                    </div>
                                    <div class="col-md-3">
                                        <input type="number" class="form-control" name="imapPort" placeholder="Port" value="#if(emailSettings):#{emailSettings.imapPort}#endif">
                                    </div>
                                    <div class="col-md-3">
                                        <input type="text" class="form-control" name="imapUsername" placeholder="Username" value="#if(emailSettings):#{emailSettings.imapUsername}#endif">
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">SMTP Settings</label>
                                <div class="row">
                                    <div class="col-md-6">
                                        <input type="text" class="form-control" name="smtpHost" placeholder="Host" value="#if(emailSettings):#{emailSettings.smtpHost}#endif">
                                    </div>
                                    <div class="col-md-3">
                                        <input type="number" class="form-control" name="smtpPort" placeholder="Port" value="#if(emailSettings):#{emailSettings.smtpPort}#endif">
                                    </div>
                                    <div class="col-md-3">
                                        <input type="text" class="form-control" name="smtpUsername" placeholder="Username" value="#if(emailSettings):#{emailSettings.smtpUsername}#endif">
                                    </div>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary">Save Settings</button>
                        </form>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title mb-0">User Management</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    #if(users != nil):
                                        #for(user in users):
                                            <tr>
                                                <td>#(user.name)</td>
                                                <td>#(user.email)</td>
                                                <td>#(user.role)</td>
                                                <td>#if(user.isSuspended):Suspended#else:Active#endif</td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-primary edit-user" data-id="#(user.id)">Edit</button>
                                                    <button class="btn btn-sm btn-outline-warning reset-password" data-id="#(user.id)">Reset Password</button>
                                                    <button class="btn btn-sm btn-outline-danger suspend-user" data-id="#(user.id)">Suspend</button>
                                                </td>
                                            </tr>
                                        #endfor
                                    #else:
                                        <tr>
                                            <td colspan="5" class="text-center">No users found</td>
                                        </tr>
                                    #endif
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="card mt-4">
                    <div class="card-header">
                        <h5 class="card-title mb-0">System Management</h5>
                    </div>
                    <div class="card-body">
                        <button id="shutdownButton" class="btn btn-danger">
                            <i class="bi bi-power"></i> Shutdown System
                        </button>
                        <div id="shutdownStatus" class="mt-2 text-muted"></div>
                    </div>
                </div>
            </div>
        #endif
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Show admin section if user is admin
            if ('#(user.role)' === 'admin') {
                document.querySelector('.admin-section').style.display = 'block';
            }

            // Shutdown button handler
            const shutdownButton = document.getElementById('shutdownButton');
            const shutdownStatus = document.getElementById('shutdownStatus');
            
            if (shutdownButton) {
                shutdownButton.addEventListener('click', async () => {
                    if (confirm('Are you sure you want to shut down the system? This will stop the web application and PostgreSQL database.')) {
                        try {
                            // Disable the button and show initial status
                            shutdownButton.disabled = true;
                            shutdownStatus.innerHTML = `
                                <div class="alert alert-info">
                                    <strong>Step 1/3:</strong> Initiating shutdown sequence...
                                </div>
                            `;
                            
                            const response = await fetch('/system/shutdown', {
                                method: 'POST',
                                headers: {
                                    'Authorization': `Bearer ${localStorage.getItem('token')}`,
                                    'Content-Type': 'application/json'
                                }
                            });
                            
                            const result = await response.json();
                            
                            if (!response.ok) {
                                throw new Error(result.message || `Error: ${result.code || 'UNKNOWN_ERROR'}`);
                            }
                            
                            if (result.status === 'error') {
                                throw new Error(result.message || `Error: ${result.code || 'UNKNOWN_ERROR'}`);
                            }
                            
                            // Show second step
                            shutdownStatus.innerHTML = `
                                <div class="alert alert-info">
                                    <strong>Step 2/3:</strong> ${result.message}
                                    <br>
                                    <small class="text-muted">${result.details || ''}</small>
                                </div>
                            `;

                            // Wait a moment before showing the final message
                            await new Promise(resolve => setTimeout(resolve, 1000));
                            
                            // Show final step
                            shutdownStatus.innerHTML = `
                                <div class="alert alert-success">
                                    <strong>Step 3/3:</strong> Shutdown complete. The application will no longer accept new connections.
                                </div>
                            `;
                            
                            // Wait 3 seconds before redirecting to the shutdown page
                            await new Promise(resolve => setTimeout(resolve, 3000));
                            window.location.href = '/shutdown';
                            
                        } catch (error) {
                            shutdownButton.disabled = false;
                            shutdownStatus.innerHTML = `
                                <div class="alert alert-danger">
                                    <strong>Shutdown Failed:</strong> ${error.message}
                                    <br>
                                    <small>Please try again or contact your system administrator if the problem persists.</small>
                                </div>
                            `;
                            console.error('Shutdown error:', error);
                        }
                    }
                });
            }

            // Initialize DataTable for users table if it exists
            const usersTable = document.querySelector('.table');
            if (usersTable) {
                // Add any table initialization code here if needed
            }

            // Email settings form
            const emailSettingsForm = document.getElementById('emailSettingsForm');
            if (emailSettingsForm) {
                emailSettingsForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(e.target);
                    const data = Object.fromEntries(formData.entries());
                    
                    try {
                        const response = await fetch('/api/v1/settings/email', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${localStorage.getItem('token')}`
                            },
                            body: JSON.stringify(data)
                        });
                        
                        if (!response.ok) {
                            throw new Error('Failed to save settings');
                        }
                        
                        alert('Settings saved successfully');
                    } catch (error) {
                        alert(error.message);
                    }
                });
            }

            // User management actions
            document.querySelectorAll('.edit-user').forEach(button => {
                button.addEventListener('click', () => {
                    const userId = button.dataset.id;
                    // Implement edit user functionality
                });
            });

            document.querySelectorAll('.reset-password').forEach(button => {
                button.addEventListener('click', async () => {
                    const userId = button.dataset.id;
                    if (confirm('Are you sure you want to reset this user\'s password?')) {
                        try {
                            const response = await fetch(`/api/v1/users/${userId}/reset-password`, {
                                method: 'POST',
                                headers: {
                                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                                }
                            });
                            
                            if (!response.ok) {
                                throw new Error('Failed to reset password');
                            }
                            
                            alert('Password reset email sent');
                        } catch (error) {
                            alert(error.message);
                        }
                    }
                });
            });

            document.querySelectorAll('.suspend-user').forEach(button => {
                button.addEventListener('click', async () => {
                    const userId = button.dataset.id;
                    const action = button.textContent.trim();
                    if (confirm(`Are you sure you want to ${action.toLowerCase()} this user?`)) {
                        try {
                            const response = await fetch(`/api/v1/users/${userId}/suspend`, {
                                method: 'POST',
                                headers: {
                                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                                }
                            });
                            
                            if (!response.ok) {
                                throw new Error(`Failed to ${action.toLowerCase()} user`);
                            }
                            
                            location.reload();
                        } catch (error) {
                            alert(error.message);
                        }
                    }
                });
            });
        });
    </script>
</body>
</html> 